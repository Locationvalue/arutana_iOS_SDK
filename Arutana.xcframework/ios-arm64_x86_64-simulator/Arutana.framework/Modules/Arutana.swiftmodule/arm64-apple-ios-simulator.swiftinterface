// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Arutana
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Arutana
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc open class InArutunaUtil : ObjectiveC.NSObject {
  @objc open class func clearTimer(_ timer: Foundation.Timer?)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ArutanaLogger) public class ArutanaLogger : ObjectiveC.NSObject {
  @objc(kArutanaLogLevel) public enum LogLevel : Swift.Int {
    case debug = 0
    case info
    case warning
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static var logLevel: Arutana.ArutanaLogger.LogLevel
  @objc public static func outputDebug(_ str: Swift.String, cls: Swift.AnyClass? = nil, method: ObjectiveC.Selector? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ArutanaManagerViewControllerDelegate {
  @objc func arutanaManagerViewControllerReceiveAd(arutanaManagerViewController: Arutana.ArutanaManagerViewController)
  @objc func arutanaManagerViewControllerFailedToReceiveAd(arutanaManagerViewController: Arutana.ArutanaManagerViewController, code: Arutana.kArutanaErrorCode)
  @objc func arutanaManagerViewControllerDidTapAd(arutanaManagerViewController: Arutana.ArutanaManagerViewController)
}
@objc public protocol ArutanaInterstitialDelegate : Arutana.ArutanaManagerViewControllerDelegate {
  @objc optional func arutanaInterstitialClose()
}
@_inheritsConvenienceInitializers @objc public class ArutanaInterstitial : ObjectiveC.NSObject {
  @objc public var delegate: (any Arutana.ArutanaInterstitialDelegate)?
  @objc public var rootViewController: UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
  @objc(setLocationId:) public func setLocationId(_ locationId: Swift.String)
  public func setSpan(span: Swift.Int)
  public func setSpan(span: Swift.Int, isPercentage: Swift.Bool)
  public func setPreventAccidentClick(preventAccidentClick: Swift.Bool)
  @objc(setEnableTestMode:) public func setEnableTestMode(_ isTest: Swift.Bool)
  @objc public func preload()
  @objc public func show() -> Swift.Bool
  @objc public func readyMakeKeyAndVisible()
  @objc public func dismiss()
}
@objc @_Concurrency.MainActor(unsafe) public class ArutanaManagerViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any Arutana.ArutanaManagerViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(params: Foundation.NSDictionary, parentView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public init(locationID: Swift.String, adType: Arutana.ArutanaAdType, rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @objc(addAdContainerView:) @_Concurrency.MainActor(unsafe) public func addAdContainerView(adContainerView: UIKit.UIView)
  @objc(setEnableTestMode:) @_Concurrency.MainActor(unsafe) public func setEnableTestMode(_ isTestMode: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func loadRequest()
  @_Concurrency.MainActor(unsafe) public func resumeRefresh()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
}
extension Arutana.ArutanaLogger.LogLevel : Swift.Equatable {}
extension Arutana.ArutanaLogger.LogLevel : Swift.Hashable {}
extension Arutana.ArutanaLogger.LogLevel : Swift.RawRepresentable {}
